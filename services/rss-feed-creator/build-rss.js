// ============================================================
// üèóÔ∏è RSS Builder (from latest manifest)
// ============================================================
//
// Reads:
//  - r2: rewritten/latest-feeds.json
//
// Writes:
//  - r2: feeds/latest.xml  (or FEED_KEY if provided)
//
// Env:
//  - RSS_FEED_TITLE, RSS_FEED_DESCRIPTION
//  - R2_BUCKET_RSS_FEEDS (or fallback to R2_BUCKET_PODCAST_RSS_FEEDS / R2_BUCKET_META)
//  - SHORTIO_API_KEY, SHORTIO_DOMAIN (optional) for link shortening
// ============================================================

import { getObjectAsText, putText } from "#shared/r2-client.js";
import { shortenIfPossible } from "#shared/shortener.js";
import { info, error } from "#logger.js";

const R2_BUCKET =
  process.env.R2_BUCKET_RSS_FEEDS ||
  process.env.R2_BUCKET_PODCAST_RSS_FEEDS ||
  process.env.R2_BUCKET_META;

const FEED_KEY = process.env.RSS_FEED_KEY || "feeds/latest.xml";

function xmlEscape(s = "") {
  return s
    .replaceAll("&", "&amp;")
    .replaceAll("<", "&lt;")
    .replaceAll(">", "&gt;")
    .replaceAll('"', "&quot;")
    .replaceAll("'", "&apos;");
}

export async function buildRSSFromManifest() {
  try {
    if (!R2_BUCKET) throw new Error("No R2 bucket set for RSS build");
    const manifestKey = "rewritten/latest-feeds.json";
    const raw = await getObjectAsText(R2_BUCKET, manifestKey);
    if (!raw) throw new Error(`Manifest not found at ${R2_BUCKET}/${manifestKey}`);

    const manifest = JSON.parse(raw);
    const title = process.env.RSS_FEED_TITLE || "AI Podcast Suite ‚Äî Feed";
    const description = process.env.RSS_FEED_DESCRIPTION || "Automated feed generated by AI Podcast Suite.";
    const now = new Date().toUTCString();

    // Optional: create a canonical link to the feed itself and shorten it for sharing
    const publicBase = process.env.R2_PUBLIC_BASE_URL_RSS || process.env.R2_PUBLIC_BASE_URL_PODCAST_RSS || "";
    const feedUrl = publicBase ? `${publicBase.replace(/\/$/, "")}/${FEED_KEY}` : "";
    const shortFeedUrl = await shortenIfPossible(feedUrl);

    // Very minimal channel; your downstream may expand items as needed
    const itemsXml = (manifest.feeds || []).map((f, i) => {
      const link = f;
      const title = `Source ${i + 1}`;
      return `
        <item>
          <title>${xmlEscape(title)}</title>
          <link>${xmlEscape(link)}</link>
          <guid>${xmlEscape(link)}</guid>
          <pubDate>${now}</pubDate>
          <description>${xmlEscape(`Imported from ${link}`)}</description>
        </item>`;
    }).join("\n");

    const xml = `<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
<channel>
  <title>${xmlEscape(title)}</title>
  <link>${xmlEscape(shortFeedUrl || feedUrl || "https://example.com/")}</link>
  <description>${xmlEscape(description)}</description>
  <lastBuildDate>${now}</lastBuildDate>
  ${itemsXml}
</channel>
</rss>`;

    await putText(R2_BUCKET, FEED_KEY, xml);
    info("üß± RSS build complete", {
      r2Bucket: R2_BUCKET,
      r2Key: FEED_KEY,
      itemCount: (manifest.feeds || []).length,
      feedUrl,
      shortFeedUrl
    });

    return { ok: true, r2Bucket: R2_BUCKET, r2Key: FEED_KEY, items: (manifest.feeds || []).length, feedUrl, shortFeedUrl };
  } catch (err) {
    error("‚ùå RSS build failed", { error: err.message });
    throw err;
  }
} 
